{"version":3,"sources":["shared/hooks/form-hooks.js","shared/util/validators.js","shared/FormElements/Input.js","shared/FormElements/Button.js","contact/components/ContactUs.js","config/contactConfig.js","contact/pages/Contact.js"],"names":["formReducer","state","action","type","formIsValid","inputId","inputs","isValid","value","validate","validators","validator","trim","length","val","test","moment","isNaN","inputReducer","isTouched","Input","props","useReducer","initialValue","initialValid","inputState","dispatch","id","onInput","useEffect","changeHandler","event","target","touchHandler","element","placeholder","onChange","onBlur","rows","className","htmlFor","label","errorText","Button","href","size","inverse","danger","children","to","exact","onClick","disabled","ContactUs","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","useForm","name","email","question","formstate","inputHandler","onSubmit","preventDefault","document","getElementById","axois","method","url","process","REACT_APP_BACKEND_URL","data","then","res","msg","alert","window","location","reload","contactConfig","Contact","contactHeaderName","contactInformationHeader","phoneNumber","linkedInLink","githubLink","facebookLink","twitterLink","Fragment","Card"],"mappings":"6PAEMA,EAAc,SAACC,EAAOC,GAC1B,OAAQA,EAAOC,MACb,IAAK,eACH,IAAIC,GAAc,EAClB,IAAK,IAAMC,KAAWJ,EAAMK,OACrBL,EAAMK,OAAOD,KAIhBD,EADEC,IAAYH,EAAOG,QACPD,GAAeF,EAAOK,QAEtBH,GAAeH,EAAMK,OAAOD,GAASE,SAGvD,OAAO,2BACFN,GADL,IAEEK,OAAO,2BACFL,EAAMK,QADL,kBAEHJ,EAAOG,QAFJ,2BAGCJ,EAAMK,OAAOJ,EAAOG,UAHrB,IAIFG,MAAON,EAAOM,MACdD,QAASL,EAAOK,YAGpBA,QAASH,IAEb,IAAK,WACH,MAAO,CACLE,OAAQJ,EAAOI,OACfC,QAASL,EAAOE,aAEpB,QACE,OAAOH,I,6BCLAQ,EAAW,SAACD,EAAOE,GAC9B,IAD6C,EACzCH,GAAU,EAD+B,cAErBG,GAFqB,IAE7C,2BAAoC,CAAC,IAA1BC,EAAyB,QA7BP,YA8BvBA,EAAUR,OACZI,EAAUA,GAAWC,EAAMI,OAAOC,OAAS,GA9BhB,cAgCzBF,EAAUR,OACZI,EAAUA,GAAWC,EAAMI,OAAOC,QAAUF,EAAUG,KAhC3B,cAkCzBH,EAAUR,OACZI,EAAUA,GAAWC,EAAMI,OAAOC,QAAUF,EAAUG,KAlCjC,QAoCnBH,EAAUR,OACZI,EAAUA,IAAYC,GAASG,EAAUG,KApCpB,QAsCnBH,EAAUR,OACZI,EAAUA,IAAYC,GAASG,EAAUG,KAtClB,UAwCrBH,EAAUR,OACZI,EAAUA,GAAW,iBAAiBQ,KAAKP,IAvCrB,SAyCrBG,EAAUR,OACXI,EAAUA,GAAWS,IAAOR,EAAO,cAAc,GAAMD,WAzC/B,WA2CvBI,EAAUR,OACXI,EAAUA,IAAYU,MAAMT,IAAUA,GAAS,IAzBN,8BA4B7C,OAAOD,GCtCHW,G,MAAe,SAACjB,EAAOC,GAC3B,OAAQA,EAAOC,MACb,IAAK,SACH,OAAO,2BACFF,GADL,IAEEO,MAAON,EAAOY,IACdP,QAASE,EAASP,EAAOY,IAAKZ,EAAOQ,cAGzC,IAAK,QACH,OAAO,2BACFT,GADL,IAEEkB,WAAW,IAEf,QACE,OAAOlB,KAkEEmB,MA9Df,SAAeC,GAAQ,IAAD,EACWC,qBAAWJ,EAAc,CACtDV,MAAOa,EAAME,cAAgB,GAC7BJ,WAAW,EACXZ,QAASc,EAAMG,eAAgB,IAJb,mBACbC,EADa,KACDC,EADC,KAOZC,EAAgBN,EAAhBM,GAAIC,EAAYP,EAAZO,QACJpB,EAAmBiB,EAAnBjB,MAAOD,EAAYkB,EAAZlB,QAEfsB,qBAAU,WACRD,EAAQD,EAAInB,EAAOD,KAClB,CAACoB,EAAInB,EAAOD,EAASqB,IAExB,IAAME,EAAgB,SAACC,GACrBL,EAAS,CACPvB,KAAM,SACNW,IAAKiB,EAAMC,OAAOxB,MAClBE,WAAYW,EAAMX,cAIhBuB,EAAe,WACnBP,EAAS,CACPvB,KAAM,WAIJ+B,EACc,UAAlBb,EAAMa,QACJ,2BACEP,GAAIN,EAAMM,GACVxB,KAAMkB,EAAMlB,KACZgC,YAAad,EAAMc,YACnBC,SAAUN,EACVO,OAAQJ,EACRzB,MAAOiB,EAAWjB,QAGpB,8BACEmB,GAAIN,EAAMM,GACVW,KAAMjB,EAAMiB,MAAQ,EACpBH,YAAad,EAAMc,YACnBC,SAAUN,EACVO,OAAQJ,EACRzB,MAAOiB,EAAWjB,QAIxB,OACE,yBACE+B,UAAS,yBACNd,EAAWlB,SAAWkB,EAAWN,WAAa,2BAGjD,2BAAOqB,QAASnB,EAAMM,IAAKN,EAAMoB,OAChCP,GACCT,EAAWlB,SAAWkB,EAAWN,WAAa,2BAAIE,EAAMqB,a,OC/BjDC,G,MA1CA,SAACtB,GACd,OAAIA,EAAMuB,KAEN,uBACEL,UAAS,yBAAoBlB,EAAMwB,MAAQ,UAAlC,YACPxB,EAAMyB,SAAW,kBADV,YAELzB,EAAM0B,QAAU,kBACpBH,KAAMvB,EAAMuB,MAEXvB,EAAM2B,UAKT3B,EAAM4B,GAEN,kBAAC,IAAD,CACEA,GAAI5B,EAAM4B,GACVC,MAAO7B,EAAM6B,MACbX,UAAS,yBAAoBlB,EAAMwB,MAAQ,UAAlC,YACPxB,EAAMyB,SAAW,kBADV,YAELzB,EAAM0B,QAAU,mBAEnB1B,EAAM2B,UAMX,4BACET,UAAS,yBAAoBlB,EAAMwB,MAAQ,UAAlC,YACPxB,EAAMyB,SAAW,kBADV,YAELzB,EAAM0B,QAAU,kBACpB5C,KAAMkB,EAAMlB,KACZgD,QAAS9B,EAAM8B,QACfC,SAAU/B,EAAM+B,UAEf/B,EAAM2B,Y,MC2CEK,MAzFf,WACE,IADmB,EJiDd,SAAiBC,EAAeC,GAAsB,IAAD,EAC5BjC,qBAAWtB,EAAa,CACpDM,OAAQgD,EACR/C,QAASgD,IAH+C,mBACnDC,EADmD,KACxC9B,EADwC,KAuB1D,MAAO,CAAC8B,EAjBaC,uBAAY,SAAC9B,EAAInB,EAAOD,GAC3CmB,EAAS,CACPvB,KAAM,eACNE,QAASsB,EACTnB,MAAOA,EACPD,QAASA,MAEV,IAEiBkD,uBAAY,SAACC,EAAWC,GAC1CjC,EAAS,CACPvB,KAAM,WACNG,OAAQoD,EACRtD,YAAauD,MAEd,KIvD+BC,CAdhB,CAChBC,KAAM,CACJrD,MAAO,GACPD,SAAS,GAEXuD,MAAO,CACLtD,MAAO,GACPD,SAAS,GAEXwD,SAAU,CACRvD,MAAO,GACPD,SAAS,KAG0C,GAfpC,mBAeZyD,EAfY,KAeDC,EAfC,KA+CnB,OACE,0BAAM1B,UAAU,eAAe2B,SA5BA,SAACnC,GAChCA,EAAMoC,iBACN,IAAMN,EAAOO,SAASC,eAAe,QAAQ7D,MACvCsD,EAAQM,SAASC,eAAe,SAAS7D,MACzCuD,EAAWK,SAASC,eAAe,YAAY7D,MAErD8D,IAAM,CACJC,OAAQ,OACRC,IAAKC,yIAAYC,sBAAwB,QACzCC,KAAM,CACJxE,KAAM,UACN0D,KAAMA,EACNC,MAAOA,EACPC,SAAUA,KAEXa,MAAK,SAACC,GACc,YAAjBA,EAAIF,KAAKG,KACXC,MAAM,+CAnBVC,OAAOC,SAASC,UAqBc,SAAjBL,EAAIF,KAAKG,KAClBC,MACE,8EAQJ,kBAAC,EAAD,CACEpD,GAAG,OACHO,QAAQ,QACR/B,KAAK,OACLsC,MAAM,OACN/B,WAAY,CHvDoB,CAAEP,KAVX,YGkEvBuC,UAAU,6BACVd,QAASqC,EACT1C,aAAcyC,EAAU1D,OAAOuD,KAAKrD,MACpCgB,aAAcwC,EAAU1D,OAAOuD,KAAKtD,UAEtC,kBAAC,EAAD,CACEoB,GAAG,QACHO,QAAQ,QACR/B,KAAK,QACLsC,MAAM,QACN/B,WAAY,CHlEoB,CAAEP,KAVX,WAsBO,CAAEA,KAjBX,UGwErBuC,UAAU,8BACVd,QAASqC,EACT1C,aAAcyC,EAAU1D,OAAOwD,MAAMtD,MACrCgB,aAAcwC,EAAU1D,OAAOwD,MAAMvD,UAEvC,kBAAC,EAAD,CACEoB,GAAG,WACHO,QAAQ,WACR/B,KAAK,OACLsC,MAAM,WACN/B,WAAY,CH7EoB,CAAEP,KAVX,YGwFvBuC,UAAU,iCACVd,QAASqC,EACT1C,aAAcyC,EAAU1D,OAAOyD,SAASvD,MACxCgB,aAAcwC,EAAU1D,OAAOyD,SAASxD,UAE1C,kBAAC,EAAD,CAAQJ,KAAK,SAASiD,UAAWY,EAAUzD,SAA3C,Y,QC/FO4E,G,MACQ,cADRA,EAEe,sBAFfA,EAGE,cAHFA,EAIJ,wBAJIA,EAKG,uDALHA,EAMC,iCANDA,EAOG,GAPHA,EAQE,GCoDAC,UApDf,WACE,IAAMC,EAAoBF,EACpBG,EAA2BH,EAC3BI,EAAcJ,EACdrB,EAAQqB,EACRK,EAAeL,EACfM,EAAaN,EACbO,EAAeP,EACfQ,EAAcR,EAEpB,OACE,kBAAC,IAAMS,SAAP,KACE,yBAAKrD,UAAU,cACb,4BAAK8C,IAEP,yBAAK9C,UAAU,aACb,yBAAKA,UAAU,iBACb,kBAACsD,EAAA,EAAD,CAAMtD,UAAU,eACd,4BAAK+C,GACJC,GAAe,4CAAkBA,GACjCzB,GAAS,qCAAWA,GACpB2B,GACC,2BACE,uBAAG7C,KAAM6C,GAAT,WAGHD,GACC,2BACE,uBAAG5C,KAAM4C,GAAT,aAGHE,GACC,2BACE,uBAAG9C,KAAM8C,GAAT,aAGHC,GACC,2BACE,uBAAG/C,KAAM+C,GAAT,cAMR,yBAAKpD,UAAU,kBACb,kBAAC,EAAD","file":"static/js/4.9718544a.chunk.js","sourcesContent":["import { useCallback, useReducer } from \"react\";\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\":\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: {\n            ...state.inputs[action.inputId],\n            value: action.value,\n            isValid: action.isValid,\n          },\n        },\n        isValid: formIsValid,\n      };\n    case \"SET_DATA\":\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid,\n      };\n    default:\n      return state;\n  }\n};\n\n// useForm hook\n// params\n// initialInputs of the form - should be a JSON object\n// initialFormValidity - true or false\n\n// returns\n// formState - state of the form {inputs..., isValid}\n// inputHander(id, value, isValid)\n// setFormData (inputData, formValidity)\n\n// example usage:\n// initialInputs = {\n//     name: {\n//         value: '',\n//         isValid: false\n//     },\n//     email: {\n//         value: '',\n//         isValid: false\n//     }\n// }\n\n// const [formState, inputHandler, setFormData] = useForm(initialInputs, false);\n\nexport function useForm(initialInputs, initialFormValidity) {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity,\n  });\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      inputId: id,\n      value: value,\n      isValid: isValid,\n    });\n  }, []);\n\n  const setFromData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: \"SET_DATA\",\n      inputs: inputData,\n      formIsValid: formValidity,\n    });\n  }, []);\n\n  return [formState, inputHandler, setFromData];\n}\n","import moment from 'moment';\n\nconst VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\nconst VALIDATOR_TYPE_DATE = 'DATE';\nconst VALIDATOR_TYPE_NUMBER = 'NUMBER';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const VALIDATOR_DATE = val => ({type: VALIDATOR_TYPE_DATE, val: val});\nexport const VALIDATOR_NUMBER = val => ({type: VALIDATOR_TYPE_NUMBER, val: val});\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n    if(validator.type === VALIDATOR_TYPE_DATE) {\n      isValid = isValid && moment(value, \"DD/MM/YYYY\", true).isValid();\n    }\n    if(validator.type === VALIDATOR_TYPE_NUMBER) {\n      isValid = isValid && !isNaN(value) && value >= 0; \n    }\n  }\n  return isValid;\n};","import React, { useReducer, useEffect } from \"react\";\n\nimport { validate } from \"../util/validators\";\n\nimport \"./Input.css\";\n\n// props for both\n// initialValue - initial value in the form\n// initialValid - initial validity of the intial value in the form\n// id - id of the form input\n// label - label for the input\n// onInput(id, value, isValid) - Function pointer for when an input has occured\n// validators - list of validators from util/validators\n// element - type of input (whether is it textArea or input)\n// type - text or email or other stuff\n// placeholder - placeholder for that input\n// rows - if it is a text area\n// errorText - text shown when validators fail\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators),\n      };\n\n    case \"TOUCH\":\n      return {\n        ...state,\n        isTouched: true,\n      };\n    default:\n      return state;\n  }\n};\n\nfunction Input(props) {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || \"\",\n    isTouched: false,\n    isValid: props.initialValid || false,\n  });\n\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = (event) => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators,\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\",\n    });\n  };\n\n  const element =\n    props.element === \"input\" ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control1 ${\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid1\"\n      }`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n}\n\nexport default Input;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Button.css\";\n\n// props\n// inverse - colour\n// danger - colour\n// size - big or small\n\n// For link out of SPA\n// href - if the button links to another link outside of SPA\n\n// For link within SPA\n// to - link within SPA\n// exact -  for SPA link\n\n// For normal Button\n// type - type of button (submit, button, reset)\n// onClick - function pointer to function when function is clicked\n// disabled - is button diabled or not (true or false)\n\nconst Button = (props) => {\n  if (props.href) {\n    return (\n      <a\n        className={`button button--${props.size || \"default\"} ${\n          props.inverse && \"button--inverse\"\n        } ${props.danger && \"button--danger\"}`}\n        href={props.href}\n      >\n        {props.children}\n      </a>\n    );\n  }\n\n  if (props.to) {\n    return (\n      <Link\n        to={props.to}\n        exact={props.exact}\n        className={`button button--${props.size || \"default\"} ${\n          props.inverse && \"button--inverse\"\n        } ${props.danger && \"button--danger\"}`}\n      >\n        {props.children}\n      </Link>\n    );\n  }\n\n  return (\n    <button\n      className={`button button--${props.size || \"default\"} ${\n        props.inverse && \"button--inverse\"\n      } ${props.danger && \"button--danger\"}`}\n      type={props.type}\n      onClick={props.onClick}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport axois from \"axios\";\n\nimport { useForm } from \"../../shared/hooks/form-hooks\";\nimport Input from \"../../shared/FormElements/Input\";\nimport Button from \"../../shared/FormElements/Button\";\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_EMAIL,\n} from \"../../shared/util/validators\";\n\nimport \"./ContactUs.css\";\n\nfunction ContactUs() {\n  let contactForm = {\n    name: {\n      value: \"\",\n      isValid: false,\n    },\n    email: {\n      value: \"\",\n      isValid: false,\n    },\n    question: {\n      value: \"\",\n      isValid: false,\n    },\n  };\n  const [formstate, inputHandler] = useForm(contactForm, false);\n\n  const resetForm = () => {\n    window.location.reload();\n  };\n  const contactFormSubmitHandler = (event) => {\n    event.preventDefault();\n    const name = document.getElementById(\"name\").value;\n    const email = document.getElementById(\"email\").value;\n    const question = document.getElementById(\"question\").value;\n\n    axois({\n      method: \"POST\",\n      url: process.env.REACT_APP_BACKEND_URL + \"/send\",\n      data: {\n        type: \"contact\",\n        name: name,\n        email: email,\n        question: question,\n      },\n    }).then((res) => {\n      if (res.data.msg === \"success\") {\n        alert(\"I will get back to you as soon as possible!\");\n        resetForm();\n      } else if (res.data.msg === \"fail\") {\n        alert(\n          \"Question failed to send due to some technical error. Please try again\"\n        );\n      }\n    });\n  };\n\n  return (\n    <form className=\"contact-form\" onSubmit={contactFormSubmitHandler}>\n      <Input\n        id=\"name\"\n        element=\"input\"\n        type=\"text\"\n        label=\"Name\"\n        validators={[VALIDATOR_REQUIRE()]}\n        errorText=\"Please enter a valid name.\"\n        onInput={inputHandler}\n        initialValue={formstate.inputs.name.value}\n        initialValid={formstate.inputs.name.isValid}\n      />\n      <Input\n        id=\"email\"\n        element=\"input\"\n        type=\"email\"\n        label=\"Email\"\n        validators={[VALIDATOR_REQUIRE(), VALIDATOR_EMAIL()]}\n        errorText=\"Please enter a valid email.\"\n        onInput={inputHandler}\n        initialValue={formstate.inputs.email.value}\n        initialValid={formstate.inputs.email.isValid}\n      />\n      <Input\n        id=\"question\"\n        element=\"textarea\"\n        type=\"text\"\n        label=\"Question\"\n        validators={[VALIDATOR_REQUIRE()]}\n        errorText=\"Please enter a valid question.\"\n        onInput={inputHandler}\n        initialValue={formstate.inputs.question.value}\n        initialValid={formstate.inputs.question.isValid}\n      />\n      <Button type=\"submit\" disabled={!formstate.isValid}>\n        Submit\n      </Button>\n    </form>\n  );\n}\n\nexport default ContactUs;\n","export const contactConfig = {\r\n  contactHeaderName: \"Contact Us\", //Name that appears on the top of contact page\r\n  contactInformationHeader: \"Contact Information\",\r\n  phoneNumber: \"93505050505\",\r\n  email: \"pinsernfang@gmail.com\",\r\n  linkedInLink: \"https://www.linkedin.com/in/pin-sern-fang-689539191/\",\r\n  githubLink: \"https://github.com/fangpinsern\",\r\n  facebookLink: \"\",\r\n  twitterLink: \"\",\r\n};\r\n","import React from \"react\";\n\nimport ContactUs from \"../components/ContactUs\";\nimport Card from \"../../shared/UIElements/Card\";\n\nimport \"./Contact.css\";\nimport { contactConfig } from \"../../config/contactConfig\";\n\nfunction Contact() {\n  const contactHeaderName = contactConfig.contactHeaderName;\n  const contactInformationHeader = contactConfig.contactInformationHeader;\n  const phoneNumber = contactConfig.phoneNumber;\n  const email = contactConfig.email;\n  const linkedInLink = contactConfig.linkedInLink;\n  const githubLink = contactConfig.githubLink;\n  const facebookLink = contactConfig.facebookLink;\n  const twitterLink = contactConfig.twitterLink;\n\n  return (\n    <React.Fragment>\n      <div className=\"homeHeader\">\n        <h1>{contactHeaderName}</h1>\n      </div>\n      <div className=\"contactUs\">\n        <div className=\"contactUsLeft\">\n          <Card className=\"contactInfo\">\n            <h1>{contactInformationHeader}</h1>\n            {phoneNumber && <p>Phone Number: {phoneNumber}</p>}\n            {email && <p>Email: {email}</p>}\n            {githubLink && (\n              <p>\n                <a href={githubLink}>GitHub</a>\n              </p>\n            )}\n            {linkedInLink && (\n              <p>\n                <a href={linkedInLink}>LinkedIn</a>\n              </p>\n            )}\n            {facebookLink && (\n              <p>\n                <a href={facebookLink}>Facebook</a>\n              </p>\n            )}\n            {twitterLink && (\n              <p>\n                <a href={twitterLink}>Twitter</a>\n              </p>\n            )}\n          </Card>\n        </div>\n\n        <div className=\"contactUsRight\">\n          <ContactUs />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Contact;\n"],"sourceRoot":""}