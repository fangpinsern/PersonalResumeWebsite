{"version":3,"sources":["shared/UIElements/Card.js","images/square1Image.jpg","images/square2Image.jpg","images/square3Image.jpg","images/resumeImage.jpg","home/components/HomeCard.js","config/homeConfig.js","home/pages/Home.js","shared/Navigation/MainHeader.js","shared/Navigation/NavLinks.js","shared/Navigation/SideDrawer.js","shared/UIElements/Backdrop.js","config/navConfig.js","shared/Navigation/MainNavigation.js","shared/modals/LoadingSpinner.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","style","children","module","exports","HomeCard","href","link","target","newTab","rel","download","src","alt","title","description","homeConfig","path","isImageDownload","Home","square3Download","headerName","square1Title","square1Description","square1Path","square2Title","square2Description","square2Path","square3","require","e","console","log","Fragment","image1","image2","image3","toLowerCase","MainHeader","NavLinks","to","exact","SideDrawer","content","onClick","ReactDOM","createPortal","document","getElementById","Backdrop","navConfig","MainNavigation","navHeaderName","useState","drawerIsOpen","setDrawerIsOpen","closeDrawer","LoadingSpinner","asOverlay","About","React","lazy","Contact","App","routes","fallback","Boolean","window","location","hostname","match","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.93d1de93.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;","module.exports = __webpack_public_path__ + \"static/media/square1Image.912af16a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/square2Image.f358e586.jpg\";","module.exports = __webpack_public_path__ + \"static/media/square3Image.012ed890.jpg\";","module.exports = __webpack_public_path__ + \"static/media/resumeImage.85f85648.jpg\";","import React from \"react\";\n\nimport Card from \"../../shared/UIElements/Card\";\n\nimport \"./HomeCard.css\";\n\n//props\n// src - image source\n// title - word on image\n// description - words at the bottom part of the card\n// link - link the card brings the user to (relative link)\n// download - whether the card will download thinks or not\n// newTab - open in new Tab or not\n\nfunction HomeCard(props) {\n  return (\n    <div className=\"cardLink\">\n      <Card className=\"homeCard\">\n        <a\n          href={props.link}\n          target={\"_blank\" && props.newTab}\n          rel=\"noopener noreferrer\"\n          download={props.download}\n        >\n          <div className=\"homeCardTop\">\n            <img src={props.src} alt=\"There is suppose to be something here\" />\n            <div className=\"wordInImage\">{props.title}</div>\n          </div>\n          <div className=\"homeCardBottom\">\n            <p>{props.description}</p>\n          </div>\n        </a>\n      </Card>\n    </div>\n  );\n}\n\nexport default HomeCard;\n","export const homeConfig = {\r\n  homeHeaderName: \"Home Header Name\", //Name that appears on the top of home page\r\n  square1Title: \"Square 1\",\r\n  square1Description: \"Square 1 Description\",\r\n  square1Path: \"/\",\r\n  square2Title: \"Square 2\",\r\n  square2Description: \"Square 2 Description\",\r\n  square2Path: \"/\",\r\n  square3: {\r\n    title: \"Square 3\",\r\n    description: \"Square 3 Description\",\r\n    path: \"/\",\r\n    isImageDownload: \"no\", // yes or no\r\n  },\r\n};\r\n","import React from \"react\";\n\nimport HomeCard from \"../components/HomeCard\";\nimport image1 from \"../../images/square1Image.jpg\";\nimport image2 from \"../../images/square2Image.jpg\";\nimport image3 from \"../../images/square3Image.jpg\";\n\nimport { homeConfig } from \"../../config/homeConfig\";\nimport \"./Home.css\";\n\nfunction Home() {\n  const headerName = homeConfig.homeHeaderName;\n  const square1Title = homeConfig.square1Title;\n  const square1Description = homeConfig.square1Description;\n  const square1Path = homeConfig.square1Path;\n  const square2Title = homeConfig.square2Title;\n  const square2Description = homeConfig.square2Description;\n  const square2Path = homeConfig.square2Path;\n\n  const square3 = homeConfig.square3;\n\n  let square3Download;\n  try {\n    if (square3.isImageDownload === \"yes\") {\n      square3Download = require(\"../../images/resumeImage.jpg\");\n    } else {\n      square3Download = square3.path || \"/\";\n    }\n  } catch (e) {\n    console.log(\n      \"isImageDownload property was set to yes. However, there was no image named 'resumeImage.jpg' to download in the images folder. Please your config input in homeConfig\"\n    );\n  }\n  return (\n    <React.Fragment>\n      <div className=\"homeHeader\">\n        <h1>{headerName}</h1>\n      </div>\n      <div className=\"homeMain\">\n        <div className=\"homeMainLeft\">\n          <HomeCard\n            src={image1}\n            title={square1Title}\n            description={square1Description}\n            link={square1Path}\n          />\n        </div>\n        <div className=\"homeMainCenter\">\n          <HomeCard\n            src={image2}\n            title={square2Title}\n            description={square2Description}\n            link={square2Path}\n            download={false}\n          />\n        </div>\n        <div className=\"homeMainRight\">\n          <HomeCard\n            src={image3}\n            title={square3.title}\n            description={square3.description}\n            link={square3Download}\n            download={square3.isImageDownload.toLowerCase() === \"yes\"}\n          />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Home;\n","import React from 'react';\n\nimport './MainHeader.css';\n\nconst MainHeader = props => {\n  return <header className=\"main-header\">{props.children}</header>;\n};\n\nexport default MainHeader;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport \"./NavLinks.css\";\n\nfunction NavLinks(props) {\n  return (\n    <ul className=\"nav-links\">\n      <li>\n        <NavLink to=\"/\" exact>\n          Home\n        </NavLink>\n      </li>\n      <li>\n        <NavLink to=\"/about\">About</NavLink>\n      </li>\n      <li>\n        <NavLink to=\"/contact\">Contact</NavLink>\n      </li>\n    </ul>\n  );\n}\n\nexport default NavLinks;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./SideDrawer.css\";\n\nfunction SideDrawer(props) {\n  const content = (\n    <aside className=\"side-drawer\" onClick={props.onClick}>\n      {props.children}\n    </aside>\n  );\n\n  return ReactDOM.createPortal(content, document.getElementById(\"drawer-hook\"));\n}\n\nexport default SideDrawer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './Backdrop.css';\n\nconst Backdrop = props => {\n  return ReactDOM.createPortal(\n    <div className=\"backdrop\" onClick={props.onClick}></div>,\n    document.getElementById('backdrop-hook')\n  );\n};\n\nexport default Backdrop;\n","export const navConfig = {\r\n  navHeaderName: \"Sample Site\", //Name that appears on the left of the navbar\r\n};\r\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport MainHeader from \"./MainHeader\";\nimport NavLinks from \"./NavLinks\";\nimport SideDrawer from \"./SideDrawer\";\nimport Backdrop from \"../UIElements/Backdrop\";\n\nimport \"./MainNavigation.css\";\nimport { navConfig } from \"../../config/navConfig\";\n\nconst MainNavigation = (props) => {\n  const navHeaderName = navConfig.navHeaderName;\n\n  const [drawerIsOpen, setDrawerIsOpen] = useState(false);\n\n  const openDrawer = () => {\n    setDrawerIsOpen(true);\n  };\n\n  const closeDrawer = () => {\n    setDrawerIsOpen(false);\n  };\n\n  return (\n    <React.Fragment>\n      {drawerIsOpen && <Backdrop onClick={closeDrawer} />}\n      {drawerIsOpen && (\n        <SideDrawer onClick={closeDrawer}>\n          <nav className=\"main-navigation__drawer-nav\">\n            <NavLinks />\n          </nav>\n        </SideDrawer>\n      )}\n      <MainHeader>\n        <button className=\"main-navigation__menu-btn\" onClick={openDrawer}>\n          <span />\n          <span />\n          <span />\n        </button>\n        <h1 className=\"main-navigation__title\">\n          <Link to=\"/\">{navHeaderName}</Link>\n        </h1>\n        <nav className=\"main-navigation__header-nav\">\n          <NavLinks />\n        </nav>\n      </MainHeader>\n    </React.Fragment>\n  );\n};\n\nexport default MainNavigation;\n","import React from 'react';\n\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = props => {\n  return (\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","import React, { Suspense } from \"react\";\n\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from \"react-router-dom\";\n\nimport Home from \"./home/pages/Home\";\nimport MainNavigation from \"./shared/Navigation/MainNavigation\";\nimport LoadingSpinner from \"./shared/modals/LoadingSpinner\";\n\nimport \"./App.css\";\n\n// In case you do not want to lazy load\n// import About from \"./about/pages/About\";\n// import Contact from \"./contact/pages/Contact\";\n\n// Lazy loading\nconst About = React.lazy(() => import(\"./about/pages/About\"));\nconst Contact = React.lazy(() => import(\"./contact/pages/Contact\"));\n\nfunction App() {\n  let routes = (\n    <Switch>\n      <Route path=\"/\" exact>\n        <Home />\n      </Route>\n      <Route path=\"/about\" exact>\n        <About />\n      </Route>\n      <Route path=\"/contact\" exact>\n        <Contact />\n      </Route>\n      <Redirect to=\"/\" />\n    </Switch>\n  );\n\n  return (\n    <Router>\n      <MainNavigation />\n      <main>\n        <Suspense\n          fallback={\n            <div className=\"center\">\n              <LoadingSpinner />\n            </div>\n          }\n        >\n          {routes}\n        </Suspense>\n      </main>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}