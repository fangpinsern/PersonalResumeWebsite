{"version":3,"sources":["shared/UIElements/Card.js","images/square1Image.jpg","images/square2Image.jpg","images/square3Image.jpg","images/resumeImage.jpg","home/components/HomeCard.js","config/homeConfig.js","home/pages/Home.js","shared/Navigation/SideDrawer.js","shared/modals/LoadingSpinner.js","config/generalConfig.js","skills/components/StarBar.js","skills/components/WhatIKnow.js","config/skillsConfig.js","skills/pages/Skills.js","education/pages/Education.js","experience/pages/Experience.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","style","children","module","exports","HomeCard","homeConfig","title","description","path","isImageDownload","Home","headerName","square3","require","e","console","log","Fragment","SideDrawer","LoadingSpinner","asOverlay","generalConfig","StarBar","numStars","map","dumb","key","WhatIKnow","name","skillsConfig","skillName","skillLevel","Skills","skillHeaderName","skills","output","length","left","skill","i","right","Education","Experience","About","React","lazy","Contact","App","websiteTitle","routes","exact","to","Helmet","fallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9b14b07b.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;","module.exports = __webpack_public_path__ + \"static/media/square1Image.912af16a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/square2Image.f358e586.jpg\";","module.exports = __webpack_public_path__ + \"static/media/square3Image.012ed890.jpg\";","module.exports = __webpack_public_path__ + \"static/media/resumeImage.85f85648.jpg\";","import React from \"react\";\n\nimport Card from \"../../shared/UIElements/Card\";\n\nimport \"./HomeCard.css\";\n\n//props\n// src - image source\n// title - word on image\n// description - words at the bottom part of the card\n// link - link the card brings the user to (relative link)\n// download - whether the card will download thinks or not\n// newTab - open in new Tab or not\n\nfunction HomeCard(props) {\n  return (\n    <div className=\"cardLink\">\n      <Card className=\"homeCard\">\n        <a\n          href={props.link}\n          target={\"_blank\" && props.newTab}\n          rel=\"noopener noreferrer\"\n          download={props.download}\n        >\n          <div className=\"homeCardTop\">\n            <img src={props.src} alt=\"There is suppose to be something here\" />\n            <div className=\"wordInImage\">{props.title}</div>\n          </div>\n          <div className=\"homeCardBottom\">\n            <p>{props.description}</p>\n          </div>\n        </a>\n      </Card>\n    </div>\n  );\n}\n\nexport default HomeCard;\n","export const homeConfig = {\r\n  homeHeaderName: \"Name\", //Name that appears on the top of home page\r\n  square1Title: \"Square 1\",\r\n  square1Description: \"Square 1 Description\",\r\n  square1Path: \"/\",\r\n  square2Title: \"Square 2\",\r\n  square2Description: \"Square 2 Description\",\r\n  square2Path: \"/\",\r\n  square3: {\r\n    title: \"Square 3\",\r\n    description: \"Square 3 Description\",\r\n    path: \"/\",\r\n    isImageDownload: \"no\", // yes or no\r\n  },\r\n};\r\n","import React from \"react\";\n\nimport HomeCard from \"../components/HomeCard\";\nimport image1 from \"../../images/square1Image.jpg\";\nimport image2 from \"../../images/square2Image.jpg\";\nimport image3 from \"../../images/square3Image.jpg\";\n\nimport { homeConfig } from \"../../config/homeConfig\";\nimport \"./Home.css\";\n\nfunction Home() {\n  const headerName = homeConfig.homeHeaderName;\n  const square1Title = homeConfig.square1Title;\n  const square1Description = homeConfig.square1Description;\n  const square1Path = homeConfig.square1Path;\n  const square2Title = homeConfig.square2Title;\n  const square2Description = homeConfig.square2Description;\n  const square2Path = homeConfig.square2Path;\n\n  const square3 = homeConfig.square3;\n\n  let square3Download;\n  try {\n    if (square3.isImageDownload === \"yes\") {\n      square3Download = require(\"../../images/resumeImage.jpg\");\n    } else {\n      square3Download = square3.path || \"/\";\n    }\n  } catch (e) {\n    console.log(\n      \"isImageDownload property was set to yes. However, there was no image named 'resumeImage.jpg' to download in the images folder. Please your config input in homeConfig\"\n    );\n  }\n  return (\n    <React.Fragment>\n      <div className=\"homeHeader\">\n        <h1>{headerName}</h1>\n      </div>\n      {/* <div className=\"homeMain\">\n        <div className=\"homeMainLeft\">\n          <HomeCard\n            src={image1}\n            title={square1Title}\n            description={square1Description}\n            link={square1Path}\n          />\n        </div>\n        <div className=\"homeMainCenter\">\n          <HomeCard\n            src={image2}\n            title={square2Title}\n            description={square2Description}\n            link={square2Path}\n            download={false}\n          />\n        </div>\n        <div className=\"homeMainRight\">\n          <HomeCard\n            src={image3}\n            title={square3.title}\n            description={square3.description}\n            link={square3Download}\n            download={square3.isImageDownload.toLowerCase() === \"yes\"}\n          />\n        </div>\n      </div> */}\n    </React.Fragment>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./SideDrawer.css\";\n\nfunction SideDrawer(props) {\n  const content = (\n    <aside className=\"side-drawer\" onClick={props.onClick}>\n      {props.children}\n    </aside>\n  );\n\n  return ReactDOM.createPortal(content, document.getElementById(\"drawer-hook\"));\n}\n\nexport default SideDrawer;\n","import React from 'react';\n\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = props => {\n  return (\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","export const generalConfig = {\r\n  websiteTitle: \"Title\", //Name that appears on the left of the navbar\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./StarBar.css\";\r\n\r\nfunction StarBar(props) {\r\n  let numStars = props.numStars;\r\n  const dummyArray = [1, 2, 3, 4, 5];\r\n  return (\r\n    <div>\r\n      {dummyArray.map((dumb) => {\r\n        numStars = numStars - 1;\r\n        if (numStars >= 0) {\r\n          return <span key={dumb} className=\"fa fa-star fa-2x checked\"></span>;\r\n        }\r\n        return <span key={dumb} className=\"fa fa-star fa-2x\"></span>;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StarBar;\r\n","import React from \"react\";\r\n\r\nimport \"./WhatIKnow.css\";\r\nimport StarBar from \"./StarBar\";\r\n\r\n//props\r\n// numStars\r\n// name\r\n\r\nfunction WhatIKnow(props) {\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-left\">{props.name}</div>\r\n      <div className=\"col-right\">\r\n        <StarBar numStars={props.numStars} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WhatIKnow;\r\n","export const skillsConfig = {\r\n  skillsHeaderName: \"Skills\", //Name that appears on the top of contact page\r\n  skills: [\r\n    {\r\n      skillName: \"Excel\",\r\n      skillLevel: 5, // how confident are you in this skill out of 5\r\n    },\r\n    {\r\n      skillName: \"Powerpoint\",\r\n      skillLevel: 3,\r\n    },\r\n  ],\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./Skills.css\";\r\nimport WhatIKnow from \"../components/WhatIKnow\";\r\nimport { skillsConfig } from \"../../config/skillsConfig\";\r\n\r\nconst Skills = () => {\r\n  const skillHeaderName = skillsConfig.skillsHeaderName;\r\n  const skills = skillsConfig.skills;\r\n  let output = <h1>something wentwrong</h1>;\r\n  if (skills.length > 5) {\r\n    const left = (\r\n      <div className=\"skillsMain-left\">\r\n        {skills.map((skill, i) => {\r\n          if (skills.length / 2 > i) {\r\n            return (\r\n              <WhatIKnow\r\n                key={i}\r\n                name={skill.skillName}\r\n                numStars={skill.skillLevel}\r\n              />\r\n            );\r\n          }\r\n        })}\r\n      </div>\r\n    );\r\n    const right = (\r\n      <div className=\"skillsMain-right\">\r\n        {skills.map((skill, i) => {\r\n          if (skills.length / 2 <= i) {\r\n            return (\r\n              <WhatIKnow\r\n                key={i}\r\n                name={skill.skillName}\r\n                numStars={skill.skillLevel}\r\n              />\r\n            );\r\n          }\r\n        })}\r\n      </div>\r\n    );\r\n    output = (\r\n      <div className=\"skillsMain2\">\r\n        {left}\r\n        {right}\r\n      </div>\r\n    );\r\n  } else {\r\n    output = (\r\n      <div className=\"skillsMain\">\r\n        {skills.map((skill, i) => {\r\n          return (\r\n            <WhatIKnow\r\n              key={i}\r\n              name={skill.skillName}\r\n              numStars={skill.skillLevel}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"skillsHeader\">\r\n        <h1>{skillHeaderName}</h1>\r\n        {output}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Skills;\r\n","import React from \"react\";\r\n\r\nimport \"./Education.css\";\r\n\r\nconst Education = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"educationHeader\">\r\n        <h1>Education</h1>\r\n        <div className=\"educationMain\"></div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Education;\r\n","import React from \"react\";\r\n\r\nimport \"./Experience.css\";\r\n\r\nconst Experience = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"experienceHeader\">\r\n        <h1>Experience</h1>\r\n        <div className=\"experienceMain\"></div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Experience;\r\n","import React, { Suspense } from \"react\";\n\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\n\nimport Home from \"./home/pages/Home\";\nimport MainNavigation from \"./shared/Navigation/MainNavigation\";\nimport LoadingSpinner from \"./shared/modals/LoadingSpinner\";\n\nimport \"./App.css\";\nimport { generalConfig } from \"./config/generalConfig\";\nimport Skills from \"./skills/pages/Skills\";\nimport Education from \"./education/pages/Education\";\nimport Experience from \"./experience/pages/Experience\";\n\n// In case you do not want to lazy load\n// import About from \"./about/pages/About\";\n// import Contact from \"./contact/pages/Contact\";\n\n// Lazy loading\nconst About = React.lazy(() => import(\"./about/pages/About\"));\nconst Contact = React.lazy(() => import(\"./contact/pages/Contact\"));\n\nfunction App() {\n  const websiteTitle = generalConfig.websiteTitle;\n\n  let routes = (\n    <Switch>\n      <Route path=\"/\" exact>\n        <Home />\n        <About />\n        <Skills />\n        <Education />\n        <Experience />\n        <Contact />\n      </Route>\n      <Route path=\"/about\" exact>\n        <About />\n      </Route>\n      <Route path=\"/contact\" exact>\n        <Contact />\n      </Route>\n      <Redirect to=\"/\" />\n    </Switch>\n  );\n\n  return (\n    <React.Fragment>\n      <Helmet>\n        <title>{websiteTitle}</title>\n      </Helmet>\n      <Router>\n        {/* <MainNavigation /> */}\n        <main>\n          <Suspense\n            fallback={\n              <div className=\"center\">\n                <LoadingSpinner />\n              </div>\n            }\n          >\n            {routes}\n          </Suspense>\n        </main>\n      </Router>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}